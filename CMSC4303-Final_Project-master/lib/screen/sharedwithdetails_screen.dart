import 'dart:io';

import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:lesson3/controller/firebasecontroller.dart';
import 'package:lesson3/model/comments.dart';
import 'package:lesson3/model/photomemo.dart';
import 'package:lesson3/model/constant.dart';
import 'package:lesson3/screen/addcomment_screen.dart';
import 'package:lesson3/screen/myview/mydialog.dart';
import 'package:lesson3/screen/myview/myimage.dart';

class SharedWithDetailsScreen extends StatefulWidget {
  static const routeName = '/sharedWithDetailsScreen';
  @override
  State<StatefulWidget> createState() {
    return _SharedWithDetailsState();
  }
}

class _SharedWithDetailsState extends State<SharedWithDetailsScreen> {
  _Controller con;
  User user;
  PhotoMemo onePhotoMemo;
  bool editMode = false;
  GlobalKey<FormState> formKey = GlobalKey<FormState>();
  String progressMessage;
  List<Comments> commentsList;

  @override
  void initState() {
    super.initState();
    con = _Controller(this);
  }

  void render(fn) => setState(fn);

  @override
  Widget build(BuildContext context) {
    Map args = ModalRoute.of(context).settings.arguments;
    user ??= args[Constant.ARG_USER];
    onePhotoMemo ??= args[Constant.ARG_ONE_PHOTOMEMO];
    commentsList ??= args[Constant.ARG_COMMENTS_LIST];
    return Scaffold(
      appBar: AppBar(
        title: Text('Detailed View of ${onePhotoMemo.title}'),
      ),
      body: Form(
        key: formKey,
        child: SingleChildScrollView(
          child: Column(
            children: [
              Stack(
                children: [
                  Container(
                    height: MediaQuery.of(context).size.height * 0.4,
                    child: MyImage.network(
                      url: onePhotoMemo.photoURL,
                      context: context,
                    ),
                  ),
                ],
              ),
              progressMessage == null
                  ? SizedBox(height: 1.0)
                  : Text(
                      progressMessage,
                      style: Theme.of(context).textTheme.headline6,
                    ),
              //TITLE
              TextFormField(
                textAlign: TextAlign.center,
                style: Theme.of(context).textTheme.headline6,
                // decoration: InputDecoration(

                // ),
                initialValue: onePhotoMemo.title,
              ),
              //MEMOS
              TextFormField(
                decoration: InputDecoration(
                  hintText: 'Enter memo',
                ),
                initialValue: onePhotoMemo.memo,
              ),
              //SHARED WITH
              TextFormField(
                decoration: InputDecoration(),
                initialValue: onePhotoMemo.sharedWith.join(','), //THIS IS AN ARRAY
              ),
              SizedBox(
                height: 5.0,
              ),
              //IMAGE LABELS GENERATED BY ML
              Constant.DEV
                  ? Text(
                      'Image Labels generated by ML',
                      style: Theme.of(context).textTheme.bodyText1,
                    )
                  : SizedBox(
                      height: 1.0,
                    ),
              Constant.DEV
                  ? Text(onePhotoMemo.imageLabels.join(' | '))
                  : SizedBox(
                      height: 1.0,
                    ),
              SizedBox(
                height: 2.0,
              ),
              commentsList.length == 0
                  ? SizedBox(
                      height: 5.0,
                    )
                  : ListView.builder(
                      shrinkWrap: true,
                      physics: NeverScrollableScrollPhysics(),
                      itemCount: commentsList.length,
                      itemBuilder: (context, index) => Card(
                        child: Column(children: [
                          ListTile(
                            title: Text('${commentsList[index].comment}',
                                textAlign: TextAlign.center),
                            subtitle: Column(
                              children: [
                                SizedBox(height: 10),
                                Row(
                                  mainAxisAlignment: MainAxisAlignment.center,
                                  children: [
                                    commentsList[index].createdBy == user.email
                                        ? Container(child: Icon(Icons.coronavirus))
                                        : SizedBox(
                                            height: 2,
                                          ),
                                    Container(
                                      child: Text(
                                          'Created By: ${commentsList[index].createdBy}'),
                                    ),
                                    commentsList[index].createdBy == user.email
                                        ? Expanded(
                                            child: Container(
                                              alignment: Alignment(1.0, 0.0),
                                              child: ElevatedButton.icon(
                                                style: ButtonStyle(
                                                    backgroundColor:
                                                        MaterialStateProperty.all<Color>(
                                                            Colors.red[900])),
                                                icon: Icon(
                                                  Icons.delete,
                                                  color: Colors.white,
                                                  size: 20,
                                                ),
                                                onPressed: () =>
                                                    con.delete(commentsList[index].docId),
                                                label: Text(
                                                  'Delete',
                                                  style:
                                                      Theme.of(context).textTheme.button,
                                                ),
                                              ),
                                            ),
                                          )
                                        : SizedBox(
                                            height: 20.0,
                                          )
                                  ],
                                ),
                              ],
                            ),
                          ),
                        ]),
                      ),
                    ),
              ElevatedButton.icon(
                icon: Icon(
                  Icons.add_comment,
                  color: Colors.white,
                  size: 36,
                ),
                onPressed: con.addComment,
                label: Text('Add Comment', style: Theme.of(context).textTheme.button),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class _Controller {
  _SharedWithDetailsState state;
  _Controller(this.state);
  File photoFile; //camera or gallery

  void addComment() async {
    try {
      await Navigator.pushNamed(state.context, AddCommentScreen.routeName, arguments: {
        Constant.ARG_USER: state.user,
        Constant.ARG_ONE_PHOTOMEMO: state.onePhotoMemo,
      });
    } catch (e) {
      MyDialog.info(
        context: state.context,
        title: 'Going to Add Comment Screen Error',
        content: '$e',
      );
    }
    state.render(() async {
      state.commentsList =
          await FirebaseController.getCommentsList(linkId: state.onePhotoMemo.docId);
    });
  }

  void delete(String docId) async {
    try {
      print(docId);
      print('Button clicked');
      await FirebaseController.deleteComment(docId: docId);
    } catch (e) {
      MyDialog.info(
        context: state.context,
        title: 'Delete Comment Error',
        content: '$e',
      );
    }
    List<Comments> reloadCommentsList =
        await FirebaseController.getCommentsList(linkId: state.onePhotoMemo.docId);
    Map<String, dynamic> updateInfo = {};
    if (reloadCommentsList.isEmpty) {
      updateInfo[PhotoMemo.HAS_COMMENTS] = 'false';
      await FirebaseController.updatePhotoMemo(state.onePhotoMemo.docId, updateInfo);
      reloadCommentsList =
          await FirebaseController.getCommentsList(linkId: state.onePhotoMemo.docId);
    }
    state.render(() {
      state.commentsList = reloadCommentsList;
    });
    print('Button Pressed');
  }
}
